import os
import telebot
from flask import Flask, request, jsonify
from PIL import Image
import io
import numpy as np

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN', '7530748232:AAF8T5Zsoa-LzqsP9T0gt5hEWYtxBhB3iLE')
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)
user_data = {}

def analyze_image_colors(image_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤–æ–ª–∫ —ç—Ç–æ –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ —Ü–≤–µ—Ç–∞–º
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(image_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
        img_array = np.array(img)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π (0-1)
        img_normalized = img_array / 255.0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        # –°–µ—Ä—ã–µ —Ü–≤–µ—Ç–∞ (–≤–æ–ª—á—å—è —à–µ—Ä—Å—Ç—å)
        gray_mask = (
            (img_normalized[:,:,0] > 0.2) & (img_normalized[:,:,0] < 0.8) &
            (img_normalized[:,:,1] > 0.2) & (img_normalized[:,:,1] < 0.8) &
            (img_normalized[:,:,2] > 0.2) & (img_normalized[:,:,2] < 0.8) &
            (np.abs(img_normalized[:,:,0] - img_normalized[:,:,1]) < 0.2) &
            (np.abs(img_normalized[:,:,1] - img_normalized[:,:,2]) < 0.2)
        )
        
        # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ/–±–µ–∂–µ–≤—ã–µ —Ü–≤–µ—Ç–∞ (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∫–æ–∂–∞/–æ–¥–µ–∂–¥–∞)
        brown_mask = (
            (img_normalized[:,:,0] > 0.4) & (img_normalized[:,:,0] < 0.8) &
            (img_normalized[:,:,1] > 0.3) & (img_normalized[:,:,1] < 0.6) &
            (img_normalized[:,:,2] > 0.2) & (img_normalized[:,:,2] < 0.4)
        )
        
        # –ë–µ–ª—ã–µ —Ü–≤–µ—Ç–∞ (—Å–Ω–µ–≥, –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–ª–∫ –≤ —Å–Ω–µ–≥—É)
        white_mask = (
            (img_normalized[:,:,0] > 0.7) &
            (img_normalized[:,:,1] > 0.7) &
            (img_normalized[:,:,2] > 0.7)
        )
        
        # –ß–µ—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ (—Ç–µ–º–Ω–∞—è —à–µ—Ä—Å—Ç—å –≤–æ–ª–∫–∞)
        black_mask = (
            (img_normalized[:,:,0] < 0.3) &
            (img_normalized[:,:,1] < 0.3) &
            (img_normalized[:,:,2] < 0.3)
        )
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        total_pixels = img_array.shape[0] * img_array.shape[1]
        gray_pixels = np.sum(gray_mask)
        brown_pixels = np.sum(brown_mask)
        white_pixels = np.sum(white_mask)
        black_pixels = np.sum(black_mask)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç—ã
        gray_percent = (gray_pixels / total_pixels) * 100
        brown_percent = (brown_pixels / total_pixels) * 100
        white_percent = (white_pixels / total_pixels) * 100
        black_percent = (black_pixels / total_pixels) * 100
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        wolf_score = gray_percent + black_percent + (white_percent * 0.5)
        human_score = brown_percent
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if wolf_score > human_score:
            confidence = wolf_score / (wolf_score + human_score) * 100
            result = f"üê∫ –≠—Ç–æ –≤–æ–ª–∫! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)"
        else:
            confidence = human_score / (wolf_score + human_score) * 100
            result = f"üë§ –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)"
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        
        
        return result 
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) --- #
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —Å—Ç–∞–µ! üê∫\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é, —á–µ–ª–æ–≤–µ–∫ —ç—Ç–æ –∏–ª–∏ –≤–æ–ª–∫!\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "üê∫ /register ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
        "üê∫ /login ‚Äî –≤–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
        "üê∫ /predict ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "üê∫ /logout ‚Äî –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n"
        "üê∫ /instructions ‚Äî —É–∑–Ω–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /register."
    )
    bot.reply_to(message, welcome_text)

@bot.message_handler(func=lambda message: '—Å–ø–∞—Å–∏–±–æ' in message.text.lower())
def thank_you_response(message):
    bot.reply_to(message, "–°—Ç–∞—è —Å —Ç–æ–±–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞! üê∫")

@bot.message_handler(commands=['register'])
def register_user(message):
    chat_id = message.chat.id
    if chat_id in user_data:
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /login")
        return
    bot.reply_to(message, "–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, process_register_password)

def process_register_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    user_data[chat_id] = {'password': password, 'logged_in': False}
    bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å —Å—Ç–∞–∏! –ó–∞–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π /login –¥–ª—è –≤—Ö–æ–¥–∞.")

@bot.message_handler(commands=['instructions'])
def send_instructions(message):
    instructions_text = (
        "–ß—Ç–æ –∂–µ, –∏—â—É—â–∏–π –¥–∞ –æ–±—Ä—è—â–µ—Ç!\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–≤–µ—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö:\n"
        "‚Ä¢ –°–µ—Ä—ã–µ, —á–µ—Ä–Ω—ã–µ, –±–µ–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ ‚Üí –≤–æ–ª–∫ üê∫\n"
        "‚Ä¢ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ, –±–µ–∂–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ ‚Üí —á–µ–ª–æ–≤–µ–∫ üë§\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üê∫ /register ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
        "üê∫ /login ‚Äî –≤–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
        "üê∫ /predict ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "üê∫ /logout ‚Äî –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /predict!"
    )
    bot.reply_to(message, instructions_text)

@bot.message_handler(commands=['login'])
def login_user(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.reply_to(message, "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /register.")
        return
    if user_data[chat_id]['logged_in']:
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ —Å—Ç–∞–µ, –±—Ä–∞—Ç –º–æ–π.")
        return
    bot.reply_to(message, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_login_password)

def process_login_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    if user_data[chat_id]['password'] == password:
        user_data[chat_id]['logged_in'] = True
        bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –≤ —Å—Ç–∞–µ! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /predict –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@bot.message_handler(commands=['logout'])
def logout_user(message):
    chat_id = message.chat.id
    if chat_id in user_data and user_data[chat_id]['logged_in']:
        user_data[chat_id]['logged_in'] = False
        bot.reply_to(message, "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —Å—Ç–∞—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è! üê∫")
    else:
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –æ—Ç–∫—É–¥–∞-—Ç–æ, –Ω–µ –∑–∞–π–¥—è –∫—É–¥–∞-—Ç–æ.")

@bot.message_handler(commands=['predict'])
def predict(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.reply_to(message, "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /register.")
        return
    if not user_data[chat_id]['logged_in']:
        bot.reply_to(message, "–¢—ã –ø–æ–∫–∞ –Ω–µ –≤–æ—à–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π /login.")
        return
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤! üê∫üë§")

@bot.message_handler(content_types=['photo'])
def process_image_prediction(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if chat_id not in user_data or not user_data[chat_id]['logged_in']:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å—Ç–∞—é –∏—Å–ø–æ–ª—å–∑—É—è /login.")
        return
        
    if not message.photo:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    
    try:
        bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–≤–µ—Ç–∞...")
        
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file_path = "temp_image.jpg"
        with open(temp_file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = analyze_image_colors(temp_file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.reply_to(message, result)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:")
        send_instructions(message)
    else:
        bot.reply_to(message, "–ù–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞! –í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –≤ —Å—Ç–∞–µ:")
        send_instructions(message)

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bad Request', 400

@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç! üê∫', 200

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 8000))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Railway
    if os.environ.get('RAILWAY_STATIC_URL'):
        # –†–µ–∂–∏–º Railway - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        railway_url = os.environ.get('RAILWAY_STATIC_URL')
        webhook_url = f"{railway_url}/"
        
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        
        app.run(host='0.0.0.0', port=port)
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        print("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ polling...")
        bot.polling(none_stop=True)