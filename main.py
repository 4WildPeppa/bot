import os
import psycopg2
from datetime import datetime
import telebot
from flask import Flask, request
from PIL import Image
import numpy as np
import urllib.parse as urlparse

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get('BOT_TOKEN', '7530748232:AAF8T5Zsoa-LzqsP9T0gt5hEWYtxBhB3iLE')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        raise Exception("DATABASE_URL not found in environment variables")
    
    # –ü–∞—Ä—Å–∏–º URL –¥–ª—è Railway PostgreSQL
    url = urlparse.urlparse(database_url)
    
    conn = psycopg2.connect(
        dbname=url.path[1:],  # —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª—ç—à
        user=url.username,
        password=url.password,
        host=url.hostname,
        port=url.port,
        sslmode='require'
    )
    
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute('''
            CREATE TABLE IF NOT EXISTS users (
                chat_id BIGINT PRIMARY KEY,
                username TEXT,
                password TEXT,
                registered_at TIMESTAMP,
                logged_in BOOLEAN DEFAULT FALSE,
                predictions_count INTEGER DEFAULT 0,
                is_admin BOOLEAN DEFAULT FALSE
            )
        ''')
        
        conn.commit()
        cur.close()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_user(chat_id, username, password):
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute("SELECT COUNT(*) FROM users")
    user_count = cur.fetchone()[0]
    is_first_user = user_count == 0
    
    cur.execute('''
        INSERT INTO users (chat_id, username, password, registered_at, is_admin) 
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (chat_id) DO UPDATE SET
        username = EXCLUDED.username,
        password = EXCLUDED.password
    ''', (chat_id, username, password, datetime.now(), is_first_user))
    
    conn.commit()
    cur.close()
    conn.close()
    return is_first_user

def get_user(chat_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM users WHERE chat_id = %s', (chat_id,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    return user

def update_login_status(chat_id, status):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('UPDATE users SET logged_in = %s WHERE chat_id = %s', (status, chat_id))
    conn.commit()
    cur.close()
    conn.close()

def increment_predictions(chat_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('UPDATE users SET predictions_count = predictions_count + 1 WHERE chat_id = %s', (chat_id,))
    conn.commit()
    cur.close()
    conn.close()

def is_admin(chat_id):
    user = get_user(chat_id)
    return user and user[6]  # is_admin is 7th column

def get_all_users():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT * FROM users ORDER BY registered_at DESC')
    users = cur.fetchall()
    cur.close()
    conn.close()
    return users

def delete_user(chat_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('DELETE FROM users WHERE chat_id = %s', (chat_id,))
    conn.commit()
    cur.close()
    conn.close()

def add_admin(chat_id, added_by):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('UPDATE users SET is_admin = TRUE WHERE chat_id = %s', (chat_id,))
    conn.commit()
    cur.close()
    conn.close()

def analyze_image_colors(image_path):
    try:
        img = Image.open(image_path)
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        img_array = np.array(img)
        height, width = img_array.shape[:2]
        img_normalized = img_array / 255.0
        
        
        zones = [
            
            (height//3, height*2//3, width//3, width*2//3, 3.0),
              
            (height//4, height*3//4, width//4, width*3//4, 1.5),
            
            (0, height, 0, width, 1.0)
        ]
        
        total_wolf_score = 0
        total_weight = 0
        
        for h_start, h_end, w_start, w_end, weight in zones:
            zone = img_normalized[h_start:h_end, w_start:w_end]
            if zone.size == 0:
                continue
                
            
            wolf_colors = (
                
                ((zone[:,:,0] > 0.4) & (zone[:,:,0] < 0.6) &
                 (zone[:,:,1] > 0.4) & (zone[:,:,1] < 0.6) &
                 (zone[:,:,2] > 0.4) & (zone[:,:,2] < 0.6) &
                 (np.abs(zone[:,:,0] - zone[:,:,1]) < 0.08) &
                 (np.abs(zone[:,:,1] - zone[:,:,2]) < 0.08)) |
                
                
                ((zone[:,:,0] > 0.25) & (zone[:,:,0] < 0.45) &
                 (zone[:,:,1] > 0.25) & (zone[:,:,1] < 0.45) &
                 (zone[:,:,2] > 0.25) & (zone[:,:,2] < 0.45) &
                 (np.abs(zone[:,:,0] - zone[:,:,1]) < 0.1))
            )
            
            wolf_pixels = np.sum(wolf_colors)
            zone_pixels = zone.shape[0] * zone.shape[1]
            wolf_score = (wolf_pixels / zone_pixels) * weight
            
            total_wolf_score += wolf_score
            total_weight += weight
        
        if total_weight == 0:
            return "ü§î –ù–µ –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
        
        wolf_percentage = (total_wolf_score / total_weight) * 100
        
        
        if wolf_percentage > 35:
            return f"üê∫ –≠—Ç–æ –≤–æ–ª–∫! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {wolf_percentage:.1f}%)"
        elif wolf_percentage > 20:
            return f"üê∫ –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–ª–∫ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {wolf_percentage:.1f}%)"
        else:
            human_confidence = 100 - wolf_percentage
            return f"–≠—Ç–æ —á–µ–ª–æ–≤–µ–∫! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {human_confidence:.1f}%)"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = get_user(message.chat.id)
    if user and user[6]:
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, –í–æ–∂–∞–∫ —Å—Ç–∞–∏! üê∫üëë\n"
            "–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å —Å–∏–ª–æ–π —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞–µ–π.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞–∏:\n"
            "üê∫ /register - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
            "üê∫ /login - –í–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
            "üê∫ /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üê∫ /logout - –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –í–æ–∂–∞–∫–∞:\n"
            "üëë /admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "üëë /users - –°–ø–∏—Å–æ–∫ –≤–æ–ª–∫–æ–≤\n"
            "üëë /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –º—É–¥—Ä–æ—Å—Ç—å —Å —É–º–æ–º!"
        )
    else:
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —Å—Ç–∞–µ! üê∫\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é, —á–µ–ª–æ–≤–µ–∫ —ç—Ç–æ –∏–ª–∏ –≤–æ–ª–∫!\n\n"
            "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
            "üê∫ /register - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
            "üê∫ /login - –í–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
            "üê∫ /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üê∫ /logout - –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n"
            "üê∫ /instructions - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
            "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /register."
        )
    bot.reply_to(message, welcome_text)

@bot.message_handler(func=lambda message: '—Å–ø–∞—Å–∏–±–æ' in message.text.lower())
def thank_you_response(message):
    bot.reply_to(message, "–°—Ç–∞—è —Å —Ç–æ–±–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞! üê∫")

@bot.message_handler(commands=['register'])
def register_user(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if user:
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ —Å—Ç–∞–µ! –ò—Å–ø–æ–ª—å–∑—É–π /login")
        return
    
    bot.reply_to(message, "–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ç–∞—é:")
    bot.register_next_step_handler(message, process_register_password)

def process_register_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    username = message.from_user.username or message.from_user.first_name
    
    if len(password) < 3:
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    is_first_user = add_user(chat_id, username, password)
    
    if is_first_user:
        response = "–¢—ã –ø–µ—Ä–≤—ã–π –≤ —Å—Ç–∞–µ –∏ —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –í–æ–∂–∞–∫–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    else:
        response = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å —Å—Ç–∞–∏! –ó–∞–ø–æ–º–Ω–∏ –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π /login"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['instructions'])
def send_instructions(message):
    instructions_text = (
        "–ß—Ç–æ –∂–µ, –∏—â—É—â–∏–π –¥–∞ –æ–±—Ä—è—â–µ—Ç!\n\n"
        
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üê∫ /register ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
        "üê∫ /login ‚Äî –≤–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
        "üê∫ /predict ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "üê∫ /logout ‚Äî –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /predict!"
    )
    bot.reply_to(message, instructions_text)

@bot.message_handler(commands=['login'])
def login_user(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.reply_to(message, "–¢—ã –µ—â–µ –Ω–µ –≤ —Å—Ç–∞–µ. –ò—Å–ø–æ–ª—å–∑—É–π /register")
        return
    
    if user[4]:  # logged_in
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ —Å—Ç–∞–µ, –±—Ä–∞—Ç –º–æ–π.")
        return
    
    bot.reply_to(message, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_login_password)

def process_login_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    user = get_user(chat_id)
    
    if user and user[2] == password:  # password field
        update_login_status(chat_id, True)
        bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –≤ —Å—Ç–∞–µ! –ò—Å–ø–æ–ª—å–∑—É–π /predict –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@bot.message_handler(commands=['logout'])
def logout_user(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if user and user[4]:  # logged_in
        update_login_status(chat_id, False)
        bot.reply_to(message, "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –≤–æ–ª–∫. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ —Å—Ç–∞—é!")
    else:
        bot.reply_to(message, "–¢—ã –µ—â–µ –Ω–µ –≤ —Å—Ç–∞–µ. –ò—Å–ø–æ–ª—å–∑—É–π /register")

@bot.message_handler(commands=['predict'])
def predict(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å—Ç–∞–µ —á–µ—Ä–µ–∑ /register")
        return
    
    if not user[4]:  # logged_in
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å—Ç–∞—é —á–µ—Ä–µ–∑ /login")
        return
    
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üê∫")

# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ —Å—Ç–∞–∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    admin_text = (
        "üëë –ü–∞–Ω–µ–ª—å –í–æ–∂–∞–∫–∞ —Å—Ç–∞–∏:\n\n"
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üê∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–∫–∞–º–∏:\n"
        "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –≤—Å–µ–π —Å—Ç–∞–∏\n"
        "‚Ä¢ /add_admin - –î–æ–±–∞–≤–∏—Ç—å –í–æ–∂–∞–∫–∞\n"
        "‚Ä¢ /delete_user - –ò–∑–≥–Ω–∞—Ç—å –∏–∑ —Å—Ç–∞–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã —Å –º—É–¥—Ä–æ—Å—Ç—å—é!"
    )
    bot.reply_to(message, admin_text)

@bot.message_handler(commands=['stats'])
def show_stats(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –í–æ–∂–∞–∫–∞.")
        return
    
    users = get_all_users()
    total_users = len(users)
    total_predictions = sum(user[5] for user in users)  # predictions_count
    active_users = sum(1 for user in users if user[4])  # logged_in
    admins_count = sum(1 for user in users if user[6])  # is_admin
    
    stats_text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–∏:\n\n"
        f"–í—Å–µ–≥–æ –≤–æ–ª–∫–æ–≤: {total_users}\n"
        f"–í —Å—Ç–∞–µ —Å–µ–π—á–∞—Å: {active_users}\n"
        f"–í–æ–∂–∞–∫–æ–≤: {admins_count}\n"
        f"–ê–Ω–∞–ª–∏–∑–æ–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {total_predictions}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /users –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    )
    bot.reply_to(message, stats_text)

@bot.message_handler(commands=['users'])
def show_users(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å—Ç–∞—é.")
        return
    
    users = get_all_users()
    
    if not users:
        bot.reply_to(message, "–°—Ç–∞—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return
    
    users_text = "üê∫ –í—Å—è —Å—Ç–∞—è:\n\n"
    for i, user in enumerate(users, 1):
        status = "–í —Å—Ç–∞–µ" if user[4] else "–ù–µ –≤ —Å—Ç–∞–µ"  # logged_in
        admin_flag = " üëë" if user[6] else ""  # is_admin
        registered_date = user[3].strftime('%Y-%m-%d') if user[3] else 'N/A'
        users_text += (
            f"{i}. {user[1] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}{admin_flag}\n"
            f"   ID: {user[0]}\n"
            f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            f"   –ê–Ω–∞–ª–∏–∑–æ–≤: {user[5]}\n"
            f"   –í —Å—Ç–∞–µ —Å: {registered_date}\n\n"
        )
    
    users_text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /delete_user [ID]"
    bot.reply_to(message, users_text)

@bot.message_handler(commands=['delete_user'])
def delete_user_cmd(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ –º–æ–∂–µ—Ç –∏–∑–≥–æ–Ω—è—Ç—å –∏–∑ —Å—Ç–∞–∏.")
        return
    
    command_parts = message.text.split()
    if len(command_parts) == 2:
        try:
            user_id_to_delete = int(command_parts[1])
            user_to_delete = get_user(user_id_to_delete)
            
            if not user_to_delete:
                bot.reply_to(message, "–í–æ–ª–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if user_to_delete[6]:  # is_admin
                bot.reply_to(message, "–ù–µ–ª—å–∑—è –∏–∑–≥–Ω–∞—Ç—å –í–æ–∂–∞–∫–∞ —Å—Ç–∞–∏.")
                return
            
            delete_user(user_id_to_delete)
            bot.reply_to(message, f"–í–æ–ª–∫ {user_to_delete[1]} –∏–∑–≥–Ω–∞–Ω –∏–∑ —Å—Ç–∞–∏.")
            
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π: /delete_user [ID]")
    else:
        bot.reply_to(message, "–î–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è —É–∫–∞–∂–∏ ID –≤–æ–ª–∫–∞:\n/delete_user [ID]\n\nID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /users")

@bot.message_handler(commands=['add_admin'])
def add_admin_cmd(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã—Ö –í–æ–∂–∞–∫–æ–≤.")
        return
    
    bot.reply_to(message, "–í–≤–µ–¥–∏ ID –≤–æ–ª–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –í–æ–∂–∞–∫–æ–º:\n(ID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /users)")
    bot.register_next_step_handler(message, process_add_admin)

def process_add_admin(message):
    chat_id = message.chat.id
    
    try:
        new_admin_id = int(message.text.strip())
        new_admin_user = get_user(new_admin_id)
        
        if not new_admin_user:
            bot.reply_to(message, "–í–æ–ª–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if new_admin_user[6]:  # is_admin
            bot.reply_to(message, "–≠—Ç–æ—Ç –≤–æ–ª–∫ —É–∂–µ –í–æ–∂–∞–∫.")
            return
        
        add_admin(new_admin_id, chat_id)
        bot.reply_to(message, f"{new_admin_user[1]} —Ç–µ–ø–µ—Ä—å –í–æ–∂–∞–∫ —Å—Ç–∞–∏! üëë")
        
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")

@bot.message_handler(content_types=['photo'])
def process_image_prediction(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user or not user[4]:  # logged_in
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å—Ç–∞—é —á–µ—Ä–µ–∑ /login")
        return
    
    try:
        
        
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        temp_file_path = "temp_image.jpg"
        with open(temp_file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        result = analyze_image_colors(temp_file_path)
        increment_predictions(chat_id)
        
        bot.reply_to(message, result)
        os.remove(temp_file_path)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        bot.reply_to(message, "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bad Request', 400

@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ —Å PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç! üê∫üëë', 200

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 8000))
    
    if os.environ.get('RAILWAY_STATIC_URL'):
        railway_url = os.environ.get('RAILWAY_STATIC_URL')
        webhook_url = f"{railway_url}/"
        
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        app.run(host='0.0.0.0', port=port)
    else:
        print("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ polling...")
        bot.polling(none_stop=True)