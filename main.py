import os
import sqlite3
import json
from datetime import datetime
import telebot
from flask import Flask, request
from PIL import Image
import numpy as np

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get('BOT_TOKEN', '7530748232:AAF8T5Zsoa-LzqsP9T0gt5hEWYtxBhB3iLE')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db', check_same_thread=False)
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (chat_id INTEGER PRIMARY KEY,
                  username TEXT,
                  password TEXT,
                  registered_at TEXT,
                  logged_in BOOLEAN DEFAULT FALSE,
                  predictions_count INTEGER DEFAULT 0,
                  is_admin BOOLEAN DEFAULT FALSE)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS admins
                 (chat_id INTEGER PRIMARY KEY,
                  added_by INTEGER,
                  added_at TEXT)''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    c.execute("SELECT COUNT(*) FROM users WHERE is_admin = TRUE")
    if c.fetchone()[0] == 0:
        # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        print("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –∞–¥–º–∏–Ω–æ–º.")
    
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('users.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def add_user(chat_id, username, password):
    conn = get_db_connection()
    c = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    c.execute("SELECT COUNT(*) FROM users")
    user_count = c.fetchone()[0]
    
    is_first_user = user_count == 0
    
    c.execute('''INSERT OR REPLACE INTO users 
                 (chat_id, username, password, registered_at, is_admin) 
                 VALUES (?, ?, ?, ?, ?)''',
              (chat_id, username, password, datetime.now().isoformat(), is_first_user))
    
    if is_first_user:
        c.execute('''INSERT OR REPLACE INTO admins (chat_id, added_by, added_at)
                     VALUES (?, ?, ?)''',
                  (chat_id, chat_id, datetime.now().isoformat()))
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    conn.commit()
    conn.close()
    return is_first_user

def get_user(chat_id):
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,)).fetchone()
    conn.close()
    return user

def update_user_password(chat_id, password):
    conn = get_db_connection()
    conn.execute('UPDATE users SET password = ? WHERE chat_id = ?', (password, chat_id))
    conn.commit()
    conn.close()

def update_login_status(chat_id, status):
    conn = get_db_connection()
    conn.execute('UPDATE users SET logged_in = ? WHERE chat_id = ?', (status, chat_id))
    conn.commit()
    conn.close()

def increment_predictions(chat_id):
    conn = get_db_connection()
    conn.execute('UPDATE users SET predictions_count = predictions_count + 1 WHERE chat_id = ?', (chat_id,))
    conn.commit()
    conn.close()

def is_admin(chat_id):
    user = get_user(chat_id)
    return user and user['is_admin']

def get_all_users():
    conn = get_db_connection()
    users = conn.execute('SELECT * FROM users ORDER BY registered_at DESC').fetchall()
    conn.close()
    return users

def delete_user(chat_id):
    conn = get_db_connection()
    conn.execute('DELETE FROM users WHERE chat_id = ?', (chat_id,))
    conn.execute('DELETE FROM admins WHERE chat_id = ?', (chat_id,))
    conn.commit()
    conn.close()

def add_admin(chat_id, added_by):
    conn = get_db_connection()
    conn.execute('UPDATE users SET is_admin = TRUE WHERE chat_id = ?', (chat_id,))
    conn.execute('INSERT OR REPLACE INTO admins (chat_id, added_by, added_at) VALUES (?, ?, ?)',
                 (chat_id, added_by, datetime.now().isoformat()))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def analyze_image_colors(image_path):
    try:
        img = Image.open(image_path)
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        img_array = np.array(img)
        img_normalized = img_array / 255.0
        
        # –¶–≤–µ—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏
        gray_mask = (
            (img_normalized[:,:,0] > 0.2) & (img_normalized[:,:,0] < 0.8) &
            (img_normalized[:,:,1] > 0.2) & (img_normalized[:,:,1] < 0.8) &
            (img_normalized[:,:,2] > 0.2) & (img_normalized[:,:,2] < 0.8) &
            (np.abs(img_normalized[:,:,0] - img_normalized[:,:,1]) < 0.2) &
            (np.abs(img_normalized[:,:,1] - img_normalized[:,:,2]) < 0.2)
        )
        
        brown_mask = (
            (img_normalized[:,:,0] > 0.4) & (img_normalized[:,:,0] < 0.8) &
            (img_normalized[:,:,1] > 0.3) & (img_normalized[:,:,1] < 0.6) &
            (img_normalized[:,:,2] > 0.2) & (img_normalized[:,:,2] < 0.4)
        )
        
        white_mask = (
            (img_normalized[:,:,0] > 0.7) &
            (img_normalized[:,:,1] > 0.7) &
            (img_normalized[:,:,2] > 0.7)
        )
        
        black_mask = (
            (img_normalized[:,:,0] < 0.3) &
            (img_normalized[:,:,1] < 0.3) &
            (img_normalized[:,:,2] < 0.3)
        )
        
        total_pixels = img_array.shape[0] * img_array.shape[1]
        gray_pixels = np.sum(gray_mask)
        brown_pixels = np.sum(brown_mask)
        white_pixels = np.sum(white_mask)
        black_pixels = np.sum(black_mask)
        
        gray_percent = (gray_pixels / total_pixels) * 100
        brown_percent = (brown_pixels / total_pixels) * 100
        white_percent = (white_pixels / total_pixels) * 100
        black_percent = (black_pixels / total_pixels) * 100
        
        wolf_score = gray_percent + black_percent + (white_percent * 0.5)
        human_score = brown_percent
        
        if wolf_score > human_score:
            confidence = wolf_score / (wolf_score + human_score) * 100
            result = f"üê∫ –≠—Ç–æ –≤–æ–ª–∫! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)"
        else:
            confidence = human_score / (wolf_score + human_score) * 100
            result = f"üë§ –≠—Ç–æ —á–µ–ª–æ–≤–µ–∫! (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)"
        
        
        
        return result
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = get_user(message.chat.id)
    if user and user['is_admin']:
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, –í–æ–∂–∞–∫ —Å—Ç–∞–∏! üê∫üëë\n"
            "–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å —Å–∏–ª–æ–π —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞–µ–π.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞–∏:\n"
            "üê∫ /register - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
            "üê∫ /login - –í–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
            "üê∫ /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üê∫ /logout - –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –í–æ–∂–∞–∫–∞:\n"
            "üëë /admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "üëë /users - –°–ø–∏—Å–æ–∫ –≤–æ–ª–∫–æ–≤\n"
            "üëë /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –º—É–¥—Ä–æ—Å—Ç—å —Å —É–º–æ–º!"
        )
    else:
        welcome_text = (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —Å—Ç–∞–µ! üê∫\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é, —á–µ–ª–æ–≤–µ–∫ —ç—Ç–æ –∏–ª–∏ –≤–æ–ª–∫!\n\n"
            "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
            "üê∫ /register - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—Ç–∞–µ\n"
            "üê∫ /login - –í–æ–π—Ç–∏ –≤ —Å—Ç–∞—é\n"
            "üê∫ /predict - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "üê∫ /logout - –ü–æ–∫–∏–Ω—É—Ç—å —Å—Ç–∞—é\n"
            "üê∫ /instructions - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
            "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /register."
        )
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['register'])
def register_user(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if user:
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ —Å—Ç–∞–µ! –ò—Å–ø–æ–ª—å–∑—É–π /login")
        return
    
    bot.reply_to(message, "–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ç–∞—é:")
    bot.register_next_step_handler(message, process_register_password)

def process_register_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    username = message.from_user.username or message.from_user.first_name
    
    if len(password) < 3:
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    is_first_user = add_user(chat_id, username, password)
    
    if is_first_user:
        response = "–¢—ã –ø–µ—Ä–≤—ã–π –≤ —Å—Ç–∞–µ –∏ —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –í–æ–∂–∞–∫–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    else:
        response = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å —Å—Ç–∞–∏! –ó–∞–ø–æ–º–Ω–∏ –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π /login"
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['login'])
def login_user(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.reply_to(message, "–¢—ã –µ—â–µ –Ω–µ –≤ —Å—Ç–∞–µ. –ò—Å–ø–æ–ª—å–∑—É–π /register")
        return
    
    if user['logged_in']:
        bot.reply_to(message, "–¢—ã —É–∂–µ –≤ —Å—Ç–∞–µ, –±—Ä–∞—Ç –º–æ–π.")
        return
    
    bot.reply_to(message, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, process_login_password)

def process_login_password(message):
    chat_id = message.chat.id
    password = message.text.strip()
    user = get_user(chat_id)
    
    if user and user['password'] == password:
        update_login_status(chat_id, True)
        bot.reply_to(message, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –≤ —Å—Ç–∞–µ! –ò—Å–ø–æ–ª—å–∑—É–π /predict –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@bot.message_handler(commands=['logout'])
def logout_user(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if user and user['logged_in']:
        update_login_status(chat_id, False)
        bot.reply_to(message, "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –≤–æ–ª–∫. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ —Å—Ç–∞—é!")
    else:
        bot.reply_to(message, "–¢—ã –µ—â–µ –Ω–µ –≤ —Å—Ç–∞–µ. –ò—Å–ø–æ–ª—å–∑—É–π /register")

@bot.message_handler(commands=['predict'])
def predict(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å—Ç–∞–µ —á–µ—Ä–µ–∑ /register")
        return
    
    if not user['logged_in']:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å—Ç–∞—é —á–µ—Ä–µ–∑ /login")
        return
    
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üê∫")

# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ —Å—Ç–∞–∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    admin_text = (
        "üëë –ü–∞–Ω–µ–ª—å –í–æ–∂–∞–∫–∞ —Å—Ç–∞–∏:\n\n"
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üê∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–∫–∞–º–∏:\n"
        "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –≤—Å–µ–π —Å—Ç–∞–∏\n"
        "‚Ä¢ /add_admin - –î–æ–±–∞–≤–∏—Ç—å –í–æ–∂–∞–∫–∞\n"
        "‚Ä¢ /delete_user - –ò–∑–≥–Ω–∞—Ç—å –∏–∑ —Å—Ç–∞–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã —Å –º—É–¥—Ä–æ—Å—Ç—å—é!"
    )
    bot.reply_to(message, admin_text)

@bot.message_handler(commands=['stats'])
def show_stats(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –í–æ–∂–∞–∫–∞.")
        return
    
    users = get_all_users()
    total_users = len(users)
    total_predictions = sum(user['predictions_count'] for user in users)
    active_users = sum(1 for user in users if user['logged_in'])
    admins_count = sum(1 for user in users if user['is_admin'])
    
    stats_text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–∏:\n\n"
        f"–í—Å–µ–≥–æ –≤–æ–ª–∫–æ–≤: {total_users}\n"
        f"–í —Å—Ç–∞–µ —Å–µ–π—á–∞—Å: {active_users}\n"
        f"–í–æ–∂–∞–∫–æ–≤: {admins_count}\n"
        f"–ê–Ω–∞–ª–∏–∑–æ–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {total_predictions}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /users –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    )
    bot.reply_to(message, stats_text)

@bot.message_handler(commands=['users'])
def show_users(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å—Ç–∞—é.")
        return
    
    users = get_all_users()
    
    if not users:
        bot.reply_to(message, "–°—Ç–∞—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return
    
    users_text = "üê∫ –í—Å—è —Å—Ç–∞—è:\n\n"
    for i, user in enumerate(users, 1):
        status = "–í —Å—Ç–∞–µ" if user['logged_in'] else "–ù–µ –≤ —Å—Ç–∞–µ"
        admin_flag = "" if user['is_admin'] else ""
        users_text += (
            f"{i}. {user['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'}{admin_flag}\n"
            f"   ID: {user['chat_id']}\n"
            f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            f"   –ê–Ω–∞–ª–∏–∑–æ–≤: {user['predictions_count']}\n"
            f"   –í —Å—Ç–∞–µ —Å: {user['registered_at'][:10]}\n\n"
        )
    
    users_text += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π /delete_user [ID]"
    bot.reply_to(message, users_text)

@bot.message_handler(commands=['delete_user'])
def delete_user_cmd(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ –º–æ–∂–µ—Ç –∏–∑–≥–æ–Ω—è—Ç—å –∏–∑ —Å—Ç–∞–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    command_parts = message.text.split()
    if len(command_parts) == 2:
        try:
            user_id_to_delete = int(command_parts[1])
            user_to_delete = get_user(user_id_to_delete)
            
            if not user_to_delete:
                bot.reply_to(message, "–í–æ–ª–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if user_to_delete['is_admin']:
                bot.reply_to(message, "–ù–µ–ª—å–∑—è –∏–∑–≥–Ω–∞—Ç—å –í–æ–∂–∞–∫–∞ —Å—Ç–∞–∏.")
                return
            
            delete_user(user_id_to_delete)
            bot.reply_to(message, f"–í–æ–ª–∫ {user_to_delete['username']} –∏–∑–≥–Ω–∞–Ω –∏–∑ —Å—Ç–∞–∏.")
            
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π: /delete_user [ID]")
    else:
        bot.reply_to(message, "–î–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è —É–∫–∞–∂–∏ ID –≤–æ–ª–∫–∞:\n/delete_user [ID]\n\nID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /users")

@bot.message_handler(commands=['add_admin'])
def add_admin_cmd(message):
    chat_id = message.chat.id
    
    if not is_admin(chat_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –í–æ–∂–∞–∫ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã—Ö –í–æ–∂–∞–∫–æ–≤.")
        return
    
    bot.reply_to(message, "–í–≤–µ–¥–∏ ID –≤–æ–ª–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –í–æ–∂–∞–∫–æ–º:\n(ID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /users)")
    bot.register_next_step_handler(message, process_add_admin)

def process_add_admin(message):
    chat_id = message.chat.id
    
    try:
        new_admin_id = int(message.text.strip())
        new_admin_user = get_user(new_admin_id)
        
        if not new_admin_user:
            bot.reply_to(message, "–í–æ–ª–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if new_admin_user['is_admin']:
            bot.reply_to(message, "–≠—Ç–æ—Ç –≤–æ–ª–∫ —É–∂–µ –í–æ–∂–∞–∫.")
            return
        
        add_admin(new_admin_id, chat_id)
        bot.reply_to(message, f"{new_admin_user['username']} —Ç–µ–ø–µ—Ä—å –í–æ–∂–∞–∫ —Å—Ç–∞–∏ üëë")
        
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")

@bot.message_handler(content_types=['photo'])
def process_image_prediction(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    
    if not user or not user['logged_in']:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏ –≤ —Å—Ç–∞—é —á–µ—Ä–µ–∑ /login")
        return
    
    try:
        #bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–≤–µ—Ç–∞...")
        
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        temp_file_path = "temp_image.jpg"
        with open(temp_file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        result = analyze_image_colors(temp_file_path)
        increment_predictions(chat_id)
        
        bot.reply_to(message, result)
        os.remove(temp_file_path)
        
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        bot.reply_to(message, "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Bad Request', 400

@app.route('/', methods=['GET'])
def index():
    return '–ë–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç! üê∫üëë', 200

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 8000))
    
    if os.environ.get('RAILWAY_STATIC_URL'):
        railway_url = os.environ.get('RAILWAY_STATIC_URL')
        webhook_url = f"{railway_url}/"
        
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
        app.run(host='0.0.0.0', port=port)
    else:
        print("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ polling...")
        bot.polling(none_stop=True)